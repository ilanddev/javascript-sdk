import { Iland } from '../../iland';
import { CatalogJson } from '../../model/catalog/__json__/catalog-json';
import { Catalog } from '../../model/catalog/catalog';
import { MediaJson } from '../../model/media/__json__/media-json';
import { Media } from '../../model/media/media';
import { VappTemplateJson } from '../../model/vapp-template/__json__/vapp-template-json';
import { VappTemplate } from '../../model/vapp-template/vapp-template';

export class LocationService {

  /**
   * Get the public catalogs for a data center location.
   * @param {string} location The location ID
   * @returns {Promise<Array<Catalog>>} promise Promise that resolves with a list of Catalog
   */
  /* istanbul ignore next: autogenerated */
  static async getPublicCatalogs(location: string): Promise<Array<Catalog>> {
    return Iland.getHttp().get(`/locations/${location}/public-catalogs`).then((response) => {
      const json = response.data.data as Array<CatalogJson>;
      return json.map((it) => new Catalog(it));
    });
  }

  /**
   * Get the public vapp templates for a data center location.
   * @param {string} location The location ID
   * @returns {Promise<Array<VappTemplate>>} promise Promise that resolves with a list of VappTemplate
   */
  /* istanbul ignore next: autogenerated */
  async getPublicVappTemplates(location: string): Promise<Array<VappTemplate>> {
    return Iland.getHttp().get(`/locations/${location}/public-vapp-templates`).then((response) => {
      const json = response.data.data as Array<VappTemplateJson>;
      return json.map((it) => new VappTemplate(it));
    });
  }

  /**
   * Get the public media for a data center location.
   * @param {string} location The location ID
   * @returns {Promise<Array<Media>>} promise Promise that resolves with a list of Media
   */
  /* istanbul ignore next: autogenerated */
  async getPublicMedia(location: string): Promise<Array<Media>> {
    return Iland.getHttp().get(`/locations/${location}/public-media`).then((response) => {
      const json = response.data.data as Array<MediaJson>;
      return json.map((it) => new Media(it));
    });
  }
}
