"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var task_1 = require("./task");
var task_filter_params_1 = require("./task-filter-params");
/**
 * Task List.
 */
/* istanbul ignore next: autogenerated */
var TaskList = (function () {
    function TaskList(_json) {
        this._json = _json;
    }
    Object.defineProperty(TaskList.prototype, "currentPageParameters", {
        /**
         * Get current page parameters.
         * @returns {TaskFilterParams}
         */
        get: function () {
            return new task_filter_params_1.TaskFilterParams(this._json.current_page_parameters);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TaskList.prototype, "nextPageParameters", {
        /**
         * Get next page parameters.
         * @returns {TaskFilterParams}
         */
        get: function () {
            return new task_filter_params_1.TaskFilterParams(this._json.next_page_parameters);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TaskList.prototype, "totalRecords", {
        /**
         * Get total records.
         * @returns {number}
         */
        get: function () {
            return this._json.total_records;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TaskList.prototype, "lastPage", {
        /**
         * Get last page.
         * @returns {boolean}
         */
        get: function () {
            return this._json.last_page;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TaskList.prototype, "data", {
        /**
         * Get data.
         * @returns {Array<TaskJson>}
         */
        get: function () {
            return this._json.data.map(function (it) { return new task_1.Task(it); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TaskList.prototype, "json", {
        /**
         * Get the json representation of this class.
         * @returns {TaskListJson}
         */
        get: function () {
            return Object.assign({}, this._json);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get the string representation of this class.
     * @returns {string}
     */
    TaskList.prototype.toString = function () {
        return JSON.stringify(this._json, undefined, 2);
    };
    return TaskList;
}());
exports.TaskList = TaskList;
