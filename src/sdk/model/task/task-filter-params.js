"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Task Filter Params.
 */
/* istanbul ignore next: autogenerated */
var TaskFilterParams = (function () {
    function TaskFilterParams(firstParam, entityType, includeDescendantTasks, synced, username, timestampAfter, timestampBefore, queryTimestamp, offset, limit, order) {
        if (typeof firstParam === 'string') {
            // Parameters constructor
            this._json = {
                entity_uuid: firstParam,
                entity_type: entityType,
                include_descendant_tasks: includeDescendantTasks,
                synced: synced,
                username: username,
                timestamp_after: timestampAfter,
                timestamp_before: timestampBefore,
                query_timestamp: queryTimestamp,
                offset: offset,
                limit: limit,
                order: order
            };
        }
        else if (firstParam instanceof TaskFilterParams) {
            // Copy constructor
            this._json = Object.assign({}, firstParam.json);
        }
        else {
            // Json or empty constructor
            this._json = (firstParam || {});
        }
    }
    Object.defineProperty(TaskFilterParams.prototype, "entityUuid", {
        /**
         * Get entity uuid.
         * @returns {string}
         */
        get: function () {
            return this._json.entity_uuid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TaskFilterParams.prototype, "entityType", {
        /**
         * Get entity type.
         * @returns {EntityType}
         */
        get: function () {
            return this._json.entity_type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TaskFilterParams.prototype, "includeDescendantTasks", {
        /**
         * Get include descendant tasks.
         * @returns {boolean}
         */
        get: function () {
            return this._json.include_descendant_tasks;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets the filter property for including or excluding descendant tasks of the entity.
     * @param {boolean} val
     * @returns {TaskFilterParams}
     */
    TaskFilterParams.prototype.setIncludeDescendants = function (val) {
        this._json.include_descendant_tasks = val;
        return this;
    };
    Object.defineProperty(TaskFilterParams.prototype, "synced", {
        /**
         * Get synced.
         * @returns {boolean}
         */
        get: function () {
            return this._json.synced;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets the filter property for excluding tasks with a synced field that doesn't match the specified boolean value.
     * @param {boolean} val
     * @returns {TaskFilterParams}
     */
    TaskFilterParams.prototype.setSynced = function (val) {
        this._json.synced = val;
        return this;
    };
    Object.defineProperty(TaskFilterParams.prototype, "username", {
        /**
         * Get username.
         * @returns {string}
         */
        get: function () {
            return this._json.username;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets the filter property for excluding tasks that were not initiated by the user with the specified username.
     * @param {string} val
     * @returns {TaskFilterParams}
     */
    TaskFilterParams.prototype.setUsername = function (val) {
        this._json.username = val;
        return this;
    };
    Object.defineProperty(TaskFilterParams.prototype, "timestampAfter", {
        /**
         * Get timestamp after.
         * @returns {number}
         */
        get: function () {
            return this._json.timestamp_after;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets the filter property for excluding tasks that do not have a timestamp after the specified epoch timestamp.
     * @param {number} val
     * @returns {TaskFilterParams}
     */
    TaskFilterParams.prototype.setTimestampAfter = function (val) {
        this._json.timestamp_after = val;
        return this;
    };
    Object.defineProperty(TaskFilterParams.prototype, "timestampBefore", {
        /**
         * Get timestamp before.
         * @returns {number}
         */
        get: function () {
            return this._json.timestamp_before;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets the filter property for excluding tasks that do not have a timestamp before the specified epoch timestamp.
     * @param {number} val
     * @returns {TaskFilterParams}
     */
    TaskFilterParams.prototype.setTimestampBefore = function (val) {
        this._json.timestamp_before = val;
        return this;
    };
    Object.defineProperty(TaskFilterParams.prototype, "queryTimestamp", {
        /**
         * Get query timestamp.
         * @returns {number}
         */
        get: function () {
            return this._json.query_timestamp;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets the query timestamp property. This property is useful for stable pagination over a query result set.
     * @param {number} val
     * @returns {TaskFilterParams}
     */
    TaskFilterParams.prototype.setQueryTimestamp = function (val) {
        this._json.query_timestamp = val;
        return this;
    };
    Object.defineProperty(TaskFilterParams.prototype, "offset", {
        /**
         * Get offset.
         * @returns {number}
         */
        get: function () {
            return this._json.offset;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets the paging offset.
     * @param {number} val
     * @returns {TaskFilterParams}
     */
    TaskFilterParams.prototype.setOffset = function (val) {
        this._json.offset = val;
        return this;
    };
    Object.defineProperty(TaskFilterParams.prototype, "limit", {
        /**
         * Get limit.
         * @returns {number}
         */
        get: function () {
            return this._json.limit;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets the paging limit.
     * @param {number} val
     * @returns {TaskFilterParams}
     */
    TaskFilterParams.prototype.setLimit = function (val) {
        this._json.limit = val;
        return this;
    };
    Object.defineProperty(TaskFilterParams.prototype, "order", {
        /**
         * Get order.
         * @returns {PagingOrder}
         */
        get: function () {
            return this._json.order;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets the paging order.
     * @param {PagingOrder} val
     * @returns {TaskFilterParams}
     */
    TaskFilterParams.prototype.setOrder = function (val) {
        this._json.order = val;
        return this;
    };
    Object.defineProperty(TaskFilterParams.prototype, "json", {
        /**
         * Get the json representation of this class.
         * @returns {TaskFilterParams}
         */
        get: function () {
            return Object.assign({}, this._json);
        },
        enumerable: true,
        configurable: true
    });
    TaskFilterParams.prototype.getQueryParams = function () {
        return {
            entityUuid: this.entityUuid,
            entityType: this.entityType,
            includeDescendantTasks: this.includeDescendantTasks,
            synced: this.synced,
            username: this.username,
            timestampAfter: this.timestampAfter,
            timestampBefore: this.timestampBefore,
            queryTimestamp: this.queryTimestamp,
            offset: this.offset,
            limit: this.limit,
            order: this.order
        };
    };
    /**
     * Get the string representation of this class.
     * @returns {string}
     */
    TaskFilterParams.prototype.toString = function () {
        return JSON.stringify(this._json, undefined, 2);
    };
    return TaskFilterParams;
}());
exports.TaskFilterParams = TaskFilterParams;
