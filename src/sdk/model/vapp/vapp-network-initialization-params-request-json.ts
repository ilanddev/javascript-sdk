import { VappNetworkInitializationParamsRequestJson } from './__json__/vapp-network-initialization-params-request-json';
import { IpRange } from '../common/ip-range/ip-range';
import { IpRangeJson } from '../common/ip-range/__json__/ip-range-json';

/**
 * Vapp network initialization params request.
 */
/* istanbul ignore next: autogenerated */
export class VappNetworkInitializationParamsRequest {

  private readonly _json: VappNetworkInitializationParamsRequestJson;

  constructor(vappNetworkInitializationParamsRequest: VappNetworkInitializationParamsRequest);
  constructor(vappNetworkInitializationParamsRequestJson: VappNetworkInitializationParamsRequestJson);
  constructor(name: string, description: string, deployed: boolean, backwardCompatibilityMode: boolean,
              retainNetInfoAcrossDeployments: boolean, parentNetworkUuid: string, gatewayAddress: string,
              networkMask: string, primaryDns: string, secondaryDns: string,
              dnsSuffix: string, ipRanges: Array<IpRangeJson>);
  constructor(firstParam: string | VappNetworkInitializationParamsRequest | VappNetworkInitializationParamsRequestJson,
              description?: string, deployed?: boolean, backwardCompatibilityMode?: boolean,
              retainNetInfoAcrossDeployments?: boolean, parentNetworkUuid?: string, gatewayAddress?: string,
              networkMask?: string, primaryDns?: string, secondaryDns?: string,
              dnsSuffix?: string, ipRanges?: Array<IpRangeJson>) {
    if (typeof firstParam === 'string') {
      // Parameters constructor
      this._json = {
        name: firstParam,
        description: description,
        deployed: deployed,
        backward_compatibility_mode: backwardCompatibilityMode,
        retain_net_info_across_deployments: retainNetInfoAcrossDeployments,
        parent_network_uuid: parentNetworkUuid,
        gateway_address: gatewayAddress,
        network_mask: networkMask,
        primary_dns: primaryDns,
        secondary_dns: secondaryDns,
        dns_suffix: dnsSuffix,
        ip_ranges: ipRanges
      } as VappNetworkInitializationParamsRequestJson;
    } else if (firstParam instanceof VappNetworkInitializationParamsRequest) {
      // Copy constructor
      this._json = (firstParam as VappNetworkInitializationParamsRequest).json;
    } else {
      // Json or empty constructor
      this._json = (firstParam || {}) as VappNetworkInitializationParamsRequestJson;
    }
  }

  /**
   * Get name.
   * @returns {string}
   */
  get name(): string {
    return this._json.name;
  }

  /**
   * Get description.
   * @returns {string}
   */
  get description(): string {
    return this._json.description;
  }

  /**
   * Get deployed.
   * @returns {boolean}
   */
  get deployed(): boolean {
    return this._json.deployed;
  }

  /**
   * Get backward compatibility mode.
   * @returns {boolean}
   */
  get backwardCompatibilityMode(): boolean {
    return this._json.backward_compatibility_mode;
  }

  /**
   * Get retain net info across deployments.
   * @returns {boolean}
   */
  get retainNetInfoAcrossDeployments(): boolean {
    return this._json.retain_net_info_across_deployments;
  }

  /**
   * Get parent network uuid.
   * @returns {string}
   */
  get parentNetworkUuid(): string {
    return this._json.parent_network_uuid;
  }

  /**
   * Get gateway address.
   * @returns {string}
   */
  get gatewayAddress(): string {
    return this._json.gateway_address;
  }

  /**
   * Get network mask.
   * @returns {string}
   */
  get networkMask(): string {
    return this._json.network_mask;
  }

  /**
   * Get primary dns.
   * @returns {string}
   */
  get primaryDns(): string {
    return this._json.primary_dns;
  }

  /**
   * Get secondary dns.
   * @returns {string}
   */
  get secondaryDns(): string {
    return this._json.secondary_dns;
  }

  /**
   * Get dns suffix.
   * @returns {string}
   */
  get dnsSuffix(): string {
    return this._json.dns_suffix;
  }

  /**
   * Get ip ranges.
   * @returns {Array<IpRange>}
   */
  get ipRanges(): Array<IpRange> {
    return this._json.ip_ranges.map(ipRange => {
      return new IpRange(ipRange);
    });
  }

  /**
   * Get the json representation of this class.
   * @returns {VappNetworkInitializationParamsRequestJson}
   */
  get json(): VappNetworkInitializationParamsRequestJson {
    return Object.assign({}, this._json);
  }

  /**
   * Get the string representation of this class.
   * @returns {string}
   */
  toString(): string {
    return JSON.stringify(this._json, undefined, 2);
  }
}
