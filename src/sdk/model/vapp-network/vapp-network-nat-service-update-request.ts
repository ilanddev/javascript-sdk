import { VappNetworkIpTranslationNATRuleRequest } from './vapp-network-ip-translation-nat-rule-request';
import { VappNetworkPortForwardNATRuleRequest } from './vapp-network-port-forward-nat-rule-request';
import {
  VappNetworkNATServiceType,
  VappNetworkNATServiceUpdateRequestJson
} from './__json__/vapp-network-nat-service-update-request-json';
import { VappNetworkIpTranslationNATRuleRequestJson }
  from './__json__/vapp-network-ip-translation-nat-rule-request-json';
import { VappNetworkPortForwardNATRuleRequestJson } from './__json__/vapp-network-port-forward-nat-rule-request-json';

/* istanbul ignore next: autogenerated */
export class VappNetworkNATServiceUpdateRequest {

  private readonly _json: VappNetworkNATServiceUpdateRequestJson;

  constructor(vappNetworkNATServiceUpdateRequest: VappNetworkNATServiceUpdateRequest);
  constructor(vappNetworkNATServiceUpdateRequestJson: VappNetworkNATServiceUpdateRequestJson);
  constructor(enabled: boolean, type: VappNetworkNATServiceType,
              ipTranslationRules: Array<VappNetworkIpTranslationNATRuleRequestJson>,
              portForwardingRules: Array<VappNetworkPortForwardNATRuleRequestJson>, enableIpMasquerade: boolean);
  constructor(firstParam: boolean | VappNetworkNATServiceUpdateRequest | VappNetworkNATServiceUpdateRequestJson,
              type?: VappNetworkNATServiceType, ipTranslationRules?: Array<VappNetworkIpTranslationNATRuleRequestJson>,
              portForwardingRules?: Array<VappNetworkPortForwardNATRuleRequestJson>, enableIpMasquerade?: boolean) {
    if (typeof firstParam === 'boolean') {
      // Parameters constructor
      this._json = {
        enabled: firstParam,
        type: type,
        ip_translation_rules: ipTranslationRules,
        port_forwarding_rules: portForwardingRules,
        enable_ip_masquerade: enableIpMasquerade
      } as VappNetworkNATServiceUpdateRequestJson;
    } else if (firstParam instanceof VappNetworkNATServiceUpdateRequest) {
      // Copy constructor
      this._json = (firstParam as VappNetworkNATServiceUpdateRequest).json;
    } else {
      // Json or empty constructor
      this._json = (firstParam || {}) as VappNetworkNATServiceUpdateRequestJson;
    }
  }

  /**
   * Get enabled.
   * @returns {boolean}
   */
  get enabled(): boolean {
    return this._json.enabled;
  }

  /**
   * Get type.
   * @returns {Type}
   */
  get type(): VappNetworkNATServiceType {
    return this._json.type;
  }

  /**
   * Get ip translation rules.
   * @returns {Array<VappNetworkIpTranslationNATRuleRequest>}
   */
  get ipTranslationRules(): Array<VappNetworkIpTranslationNATRuleRequest> {
    return this._json.ip_translation_rules.map((rule) => {
      return new VappNetworkIpTranslationNATRuleRequest(rule);
    });
  }

  /**
   * Get port forwarding rules.
   * @returns {Array<VappNetworkPortForwardNATRuleRequest>}
   */
  get portForwardingRules(): Array<VappNetworkPortForwardNATRuleRequest> {
    return this._json.port_forwarding_rules.map((rule) => {
      return new VappNetworkPortForwardNATRuleRequest(rule);
    });
  }

  /**
   * Get enable ip masquerade.
   * @returns {boolean}
   */
  get enableIpMasquerade(): boolean {
    return this._json.enable_ip_masquerade;
  }

  /**
   * Get the json representation of this class.
   * @returns {VappNetworkNATServiceUpdateRequestJson}
   */
  get json(): VappNetworkNATServiceUpdateRequestJson {
    return Object.assign({}, this._json);
  }

  /**
   * Get the string representation of this class.
   * @returns {string}
   */
  toString(): string {
    return JSON.stringify(this._json, undefined, 2);
  }
}
