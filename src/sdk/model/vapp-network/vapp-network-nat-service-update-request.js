"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var vapp_network_ip_translation_nat_rule_request_1 = require("./vapp-network-ip-translation-nat-rule-request");
var vapp_network_port_forward_nat_rule_request_1 = require("./vapp-network-port-forward-nat-rule-request");
/* istanbul ignore next: autogenerated */
var VappNetworkNATServiceUpdateRequest = (function () {
    function VappNetworkNATServiceUpdateRequest(firstParam, type, ipTranslationRules, portForwardingRules, enableIpMasquerade) {
        if (typeof firstParam === 'boolean') {
            // Parameters constructor
            this._json = {
                enabled: firstParam,
                type: type,
                ip_translation_rules: ipTranslationRules,
                port_forwarding_rules: portForwardingRules,
                enable_ip_masquerade: enableIpMasquerade
            };
        }
        else if (firstParam instanceof VappNetworkNATServiceUpdateRequest) {
            // Copy constructor
            this._json = firstParam.json;
        }
        else {
            // Json or empty constructor
            this._json = (firstParam || {});
        }
    }
    Object.defineProperty(VappNetworkNATServiceUpdateRequest.prototype, "enabled", {
        /**
         * Get enabled.
         * @returns {boolean}
         */
        get: function () {
            return this._json.enabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VappNetworkNATServiceUpdateRequest.prototype, "type", {
        /**
         * Get type.
         * @returns {Type}
         */
        get: function () {
            return this._json.type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VappNetworkNATServiceUpdateRequest.prototype, "ipTranslationRules", {
        /**
         * Get ip translation rules.
         * @returns {Array<VappNetworkIpTranslationNATRuleRequest>}
         */
        get: function () {
            return this._json.ip_translation_rules.map(function (rule) {
                return new vapp_network_ip_translation_nat_rule_request_1.VappNetworkIpTranslationNATRuleRequest(rule);
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VappNetworkNATServiceUpdateRequest.prototype, "portForwardingRules", {
        /**
         * Get port forwarding rules.
         * @returns {Array<VappNetworkPortForwardNATRuleRequest>}
         */
        get: function () {
            return this._json.port_forwarding_rules.map(function (rule) {
                return new vapp_network_port_forward_nat_rule_request_1.VappNetworkPortForwardNATRuleRequest(rule);
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VappNetworkNATServiceUpdateRequest.prototype, "enableIpMasquerade", {
        /**
         * Get enable ip masquerade.
         * @returns {boolean}
         */
        get: function () {
            return this._json.enable_ip_masquerade;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VappNetworkNATServiceUpdateRequest.prototype, "json", {
        /**
         * Get the json representation of this class.
         * @returns {VappNetworkNATServiceUpdateRequestJson}
         */
        get: function () {
            return Object.assign({}, this._json);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get the string representation of this class.
     * @returns {string}
     */
    VappNetworkNATServiceUpdateRequest.prototype.toString = function () {
        return JSON.stringify(this._json, undefined, 2);
    };
    return VappNetworkNATServiceUpdateRequest;
}());
exports.VappNetworkNATServiceUpdateRequest = VappNetworkNATServiceUpdateRequest;
