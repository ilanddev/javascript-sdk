"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var vapp_network_ip_translation_nat_rule_1 = require("./vapp-network-ip-translation-nat-rule");
var vapp_network_port_forward_nat_rule_1 = require("./vapp-network-port-forward-nat-rule");
/* istanbul ignore next: autogenerated */
var VappNetworkNATService = (function () {
    function VappNetworkNATService(_json) {
        this._json = _json;
    }
    Object.defineProperty(VappNetworkNATService.prototype, "vappUuid", {
        /**
         * Get vapp uuid.
         * @returns {string}
         */
        get: function () {
            return this._json.vapp_uuid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VappNetworkNATService.prototype, "networkName", {
        /**
         * Get network name.
         * @returns {string}
         */
        get: function () {
            return this._json.network_name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VappNetworkNATService.prototype, "enabled", {
        /**
         * Get enabled.
         * @returns {boolean}
         */
        get: function () {
            return this._json.enabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VappNetworkNATService.prototype, "type", {
        /**
         * Get type.
         * @returns {string}
         */
        get: function () {
            return this._json.type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VappNetworkNATService.prototype, "ipTranslationRules", {
        /**
         * Get ip translation rules.
         * @returns {Array<VappNetworkIpTranslationNATRule>}
         */
        get: function () {
            return this._json.ip_translation_rules.map(function (rule) {
                return new vapp_network_ip_translation_nat_rule_1.VappNetworkIpTranslationNATRule(rule);
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VappNetworkNATService.prototype, "portForwardingRules", {
        /**
         * Get port forwarding rules.
         * @returns {Array<VappNetworkPortForwardNATRule>}
         */
        get: function () {
            return this._json.port_forwarding_rules.map(function (rule) {
                return new vapp_network_port_forward_nat_rule_1.VappNetworkPortForwardNATRule(rule);
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VappNetworkNATService.prototype, "enableIpMasquerade", {
        /**
         * Get enable ip masquerade.
         * @returns {boolean}
         */
        get: function () {
            return this._json.enable_ip_masquerade;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VappNetworkNATService.prototype, "json", {
        /**
         * Get the json representation of this class.
         * @returns {VappNetworkNATServiceJson}
         */
        get: function () {
            return Object.assign({}, this._json);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get the string representation of this class.
     * @returns {string}
     */
    VappNetworkNATService.prototype.toString = function () {
        return JSON.stringify(this._json, undefined, 2);
    };
    return VappNetworkNATService;
}());
exports.VappNetworkNATService = VappNetworkNATService;
