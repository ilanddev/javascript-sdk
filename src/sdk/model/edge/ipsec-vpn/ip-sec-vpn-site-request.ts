import { EncryptionAlgorithm } from './__json__/encyrption-algorithm';
import { AuthenticationMode } from './__json__/authentication-mode';
import { DHGroup } from './__json__/dh-group';
import { IpSecVpnSiteRequestJson } from './__json__/ip-sec-vpn-site-request-json';

/**
 * Ip Sec Vpn Site Request.
 */
/* istanbul ignore next: autogenerated */
export class IpSecVpnSiteRequest {

  private readonly _json: IpSecVpnSiteRequestJson;

  constructor(ipSecVpnSiteRequest: IpSecVpnSiteRequest);
  constructor(ipSecVpnSiteRequestJson: IpSecVpnSiteRequestJson);
  constructor(enabled: boolean, name: string, description: string, localId: string, localIp: string, peerId: string,
              peerIp: string, psk: string, encryptionAlgorithm: EncryptionAlgorithm,
              authenticationMode: AuthenticationMode, enablePfs: boolean, dhGroup: DHGroup, localSubnets: Array<string>,
              peerSubnets: Array<string>);
  constructor(firstParam: boolean | IpSecVpnSiteRequest | IpSecVpnSiteRequestJson, name?: string, description?: string,
              localId?: string, localIp?: string, peerId?: string, peerIp?: string, psk?: string,
              encryptionAlgorithm?: EncryptionAlgorithm, authenticationMode?: AuthenticationMode, enablePfs?: boolean,
              dhGroup?: DHGroup, localSubnets?: Array<string>, peerSubnets?: Array<string>) {
    if (typeof firstParam === 'boolean') {
      // Parameters constructor
      this._json = {
        enabled: firstParam,
        name: name,
        description: description,
        local_id: localId,
        local_ip: localIp,
        peer_id: peerId,
        peer_ip: peerIp,
        psk: psk,
        encryption_algorithm: encryptionAlgorithm,
        authentication_mode: authenticationMode,
        enable_pfs: enablePfs,
        dh_group: dhGroup,
        local_subnets: localSubnets,
        peer_subnets: peerSubnets
      } as IpSecVpnSiteRequestJson;
    } else if (firstParam instanceof IpSecVpnSiteRequest) {
      // Copy constructor
      this._json = (firstParam as IpSecVpnSiteRequest).json;
    } else {
      // Json or empty constructor
      this._json = (firstParam || {}) as IpSecVpnSiteRequestJson;
    }
  }

  /**
   * Get enabled.
   * @returns {boolean}
   */
  get enabled(): boolean {
    return this._json.enabled;
  }

  /**
   * Get name.
   * @returns {string}
   */
  get name(): string {
    return this._json.name;
  }

  /**
   * Get description.
   * @returns {string}
   */
  get description(): string {
    return this._json.description;
  }

  /**
   * Get local id.
   * @returns {string}
   */
  get localId(): string {
    return this._json.local_id;
  }

  /**
   * Get local ip.
   * @returns {string}
   */
  get localIp(): string {
    return this._json.local_ip;
  }

  /**
   * Get peer id.
   * @returns {string}
   */
  get peerId(): string {
    return this._json.peer_id;
  }

  /**
   * Get peer ip.
   * @returns {string}
   */
  get peerIp(): string {
    return this._json.peer_ip;
  }

  /**
   * Get psk.
   * @returns {string}
   */
  get psk(): string {
    return this._json.psk;
  }

  /**
   * Get encryption algorithm.
   * @returns {EncryptionAlgorithm}
   */
  get encryptionAlgorithm(): EncryptionAlgorithm {
    return this._json.encryption_algorithm;
  }

  /**
   * Get authentication mode.
   * @returns {AuthenticationMode}
   */
  get authenticationMode(): AuthenticationMode {
    return this._json.authentication_mode;
  }

  /**
   * Get enable pfs.
   * @returns {boolean}
   */
  get enablePfs(): boolean {
    return this._json.enable_pfs;
  }

  /**
   * Get dh group.
   * @returns {DHGroup}
   */
  get dhGroup(): DHGroup {
    return this._json.dh_group;
  }

  /**
   * Get local subnets.
   * @returns {Array<string>}
   */
  get localSubnets(): Array<string> {
    return this._json.local_subnets;
  }

  /**
   * Get peer subnets.
   * @returns {Array<string>}
   */
  get peerSubnets(): Array<string> {
    return this._json.peer_subnets;
  }

  /**
   * Get the json representation of this class.
   * @returns {IpSecVpnSiteRequestJson}
   */
  get json(): IpSecVpnSiteRequestJson {
    return Object.assign({}, this._json);
  }

  /**
   * Get the string representation of this class.
   * @returns {string}
   */
  toString(): string {
    return JSON.stringify(this._json, undefined, 2);
  }
}
