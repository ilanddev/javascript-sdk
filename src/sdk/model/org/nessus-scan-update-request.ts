import { NessusScanUpdateRequestJson } from './__json__/nessus-scan-update-request-json';
import { NessusScanSettingsUpdateRequestJson } from './__json__/nessus-scan-settings-update-request-json';
import { NessusScanSettingsUpdateRequest } from './nessus-scan-settings-update-request';

/**
 * Nessus Scan Update Request.
 */
/* istanbul ignore next: autogenerated */
export class NessusScanUpdateRequest {

  private readonly _json: NessusScanUpdateRequestJson;

  constructor(nessusScanUpdateRequest: NessusScanUpdateRequest);
  constructor(nessusScanUpdateRequestJson: NessusScanUpdateRequestJson);
  constructor(templateUuid: string, scanSettings: NessusScanSettingsUpdateRequestJson);
  constructor(firstParam: string | NessusScanUpdateRequest | NessusScanUpdateRequestJson,
              scanSettings?: NessusScanSettingsUpdateRequestJson) {
    if (typeof firstParam === 'string') {
      // Parameters constructor
      this._json = {
        template_uuid: firstParam,
        scan_settings: scanSettings
      } as NessusScanUpdateRequestJson;
    } else if (firstParam instanceof NessusScanUpdateRequest) {
      // Copy constructor
      this._json = (firstParam as NessusScanUpdateRequest).json;
    } else {
      // Json or empty constructor
      this._json = (firstParam || {}) as NessusScanUpdateRequestJson;
    }
  }

  /**
   * Get template uuid.
   * @returns {string}
   */
  get templateUuid(): string {
    return this._json.template_uuid;
  }

  /**
   * Get scan settings.
   * @returns {NessusScanSettingsUpdateRequest}
   */
  get scanSettings(): NessusScanSettingsUpdateRequest {
    return new NessusScanSettingsUpdateRequest(this._json.scan_settings);
  }

  /**
   * Get the json representation of this class.
   * @returns {NessusScanUpdateRequestJson}
   */
  get json(): NessusScanUpdateRequestJson {
    return Object.assign({}, this._json);
  }

  /**
   * Get the string representation of this class.
   * @returns {string}
   */
  toString(): string {
    return JSON.stringify(this._json, undefined, 2);
  }
}
