import { NessusScanSettingsUpdateRequestJson } from './__json__/nessus-scan-settings-update-request-json';

/**
 * Nessus Scan Settings Update Request.
 */
/* istanbul ignore next: autogenerated */
export class NessusScanSettingsUpdateRequest {

  private readonly _json: NessusScanSettingsUpdateRequestJson;

  constructor(nessusScanSettingsUpdateRequest: NessusScanSettingsUpdateRequest);
  constructor(nessusScanSettingsUpdateRequestJson: NessusScanSettingsUpdateRequestJson);
  constructor(name: string, description: string, emails: string, enabled: boolean, launch: string, folderId: string,
              policyId: string, scannerId: string, startTime: string, textTargets: string, fileTargets: string,
              rRules: string, useDashboard: boolean, acls: Array<string>, timezone: string);
  constructor(firstParam: string | NessusScanSettingsUpdateRequest | NessusScanSettingsUpdateRequestJson,
              description?: string, emails?: string, enabled?: boolean, launch?: string, folderId?: string,
              policyId?: string, scannerId?: string, startTime?: string, textTargets?: string, fileTargets?: string,
              rRules?: string, useDashboard?: boolean, acls?: Array<string>, timezone?: string) {
    if (typeof firstParam === 'string') {
      // Parameters constructor
      this._json = {
        name: firstParam,
        description: description,
        emails: emails,
        enabled: enabled,
        launch: launch,
        folder_id: folderId,
        policy_id: policyId,
        scanner_id: scannerId,
        start_time: startTime,
        text_targets: textTargets,
        file_targets: fileTargets,
        r_rules: rRules,
        use_dashboard: useDashboard,
        acls: acls,
        timezone: timezone
      } as NessusScanSettingsUpdateRequestJson;
    } else if (firstParam instanceof NessusScanSettingsUpdateRequest) {
      // Copy constructor
      this._json = (firstParam as NessusScanSettingsUpdateRequest).json;
    } else {
      // Json or empty constructor
      this._json = (firstParam || {}) as NessusScanSettingsUpdateRequestJson;
    }
  }

  /**
   * Get name.
   * @returns {string}
   */
  get name(): string {
    return this._json.name;
  }

  /**
   * Get description.
   * @returns {string}
   */
  get description(): string {
    return this._json.description;
  }

  /**
   * Get emails.
   * @returns {string}
   */
  get emails(): string {
    return this._json.emails;
  }

  /**
   * Get enabled.
   * @returns {boolean}
   */
  get enabled(): boolean {
    return this._json.enabled;
  }

  /**
   * Get launch.
   * @returns {string}
   */
  get launch(): string {
    return this._json.launch;
  }

  /**
   * Get folder id.
   * @returns {string}
   */
  get folderId(): string {
    return this._json.folder_id;
  }

  /**
   * Get policy id.
   * @returns {string}
   */
  get policyId(): string {
    return this._json.policy_id;
  }

  /**
   * Get scanner id.
   * @returns {string}
   */
  get scannerId(): string {
    return this._json.scanner_id;
  }

  /**
   * Get start time.
   * @returns {string}
   */
  get startTime(): string {
    return this._json.start_time;
  }

  /**
   * Get text targets.
   * @returns {string}
   */
  get textTargets(): string {
    return this._json.text_targets;
  }

  /**
   * Get file targets.
   * @returns {string}
   */
  get fileTargets(): string {
    return this._json.file_targets;
  }

  /**
   * Get r rules.
   * @returns {string}
   */
  get rRules(): string {
    return this._json.r_rules;
  }

  /**
   * Get use dashboard.
   * @returns {boolean}
   */
  get useDashboard(): boolean {
    return this._json.use_dashboard;
  }

  /**
   * Get acls.
   * @returns {Array<string>}
   */
  get acls(): Array<string> {
    return this._json.acls;
  }

  /**
   * Get timezone.
   * @returns {string}
   */
  get timezone(): string {
    return this._json.timezone;
  }

  /**
   * Get the json representation of this class.
   * @returns {NessusScanSettingsUpdateRequestJson}
   */
  get json(): NessusScanSettingsUpdateRequestJson {
    return Object.assign({}, this._json);
  }

  /**
   * Get the string representation of this class.
   * @returns {string}
   */
  toString(): string {
    return JSON.stringify(this._json, undefined, 2);
  }
}
