import { DisasterRecoveryRunbookJson } from './__json__/disaster-recovery-runbook-json';
import { RecoveryGroupDescriptor } from './recovery-group-descriptor';
import { Iland } from '../../../iland';
import { DisasterRecoveryRunbookUpdateRequest } from './disaster-recovery-runbook-update-request';
import { Task } from '../../task/task';
import { DisasterRecoveryRunbookAbortRequest } from './disaster-recovery-runbook-abort-request';
import { TaskJson } from '../../task/__json__/task-json';
import { DisasterRecoveryRunbookExecuteRequest } from './disaster-recovery-runbook-execute-request';
import {
  DisasterRecoveryRunbookFinalizeExecutionRequest
} from './disaster-recovery-runbook-finalize-execution-request';
import { Observable } from 'rxjs/Observable';
import { Http } from '../../../service/http/http';
import { DisasterRecoveryRunbookReportDetails } from './disaster-recovery-runbook-task-details';
import { DisasterRecoveryRunbookReportDetailsJson } from './__json__/disaster-recovery-runbook-task-details-json';

/**
 * Disaster recovery runbook
 */
/* istanbul ignore next: autogenerated */
export class DisasterRecoveryRunbook {

  constructor(private _json: DisasterRecoveryRunbookJson) {
  }

  /**
   * Gets an DisasterRecoveryRunbook by UUID.
   * @param uuid DisasterRecoveryRunbook UUID
   * @returns {Promise<DisasterRecoveryRunbook>} promise that resolves with the DisasterRecoveryRunbook
   */
  static async getDisasterRecoveryRunbook(uuid: string): Promise<DisasterRecoveryRunbook> {
    return Iland.getHttp().get(`/disaster-recovery-runbooks/${uuid}`).then((response) => {
      const json = response.data as DisasterRecoveryRunbookJson;
      return new DisasterRecoveryRunbook(json);
    });
  }

  /**
   * Get location id.
   * @returns {string}
   */
  get locationId(): string {
    return this._json.location_id;
  }

  /**
   * Get org uuid.
   * @returns {string}
   */
  get orgUuid(): string {
    return this._json.org_uuid;
  }

  /**
   * Get description.
   * @returns {string}
   */
  get description(): string {
    return this._json.description;
  }

  /**
   * Get created date.
   * @returns {number}
   */
  get createdDate(): number {
    return this._json.created_date;
  }

  /**
   * Get last test.
   * @returns {number}
   */
  get lastTest(): number {
    return this._json.last_test;
  }

  /**
   * Get recovery groups.
   * @returns {Array<RecoveryGroupDescriptor>}
   */
  get recoveryGroups(): Array<RecoveryGroupDescriptor> {
    return this._json.recovery_groups.map(group => {
      return new RecoveryGroupDescriptor(group);
    });
  }

  /**
   * Get uuid.
   * @returns {string}
   */
  get uuid(): string {
    return this._json.uuid;
  }

  /**
   * Get name.
   * @returns {string}
   */
  get name(): string {
    return this._json.name;
  }

  /**
   * Get deleted.
   * @returns {boolean}
   */
  get deleted(): boolean {
    return this._json.deleted;
  }

  /**
   * Get deleted date.
   * @returns {number}
   */
  get deletedDate(): number {
    return this._json.deleted_date;
  }

  /**
   * Get updated date.
   * @returns {number}
   */
  get updatedDate(): number {
    return this._json.updated_date;
  }

  /**
   * Get company id.
   * @returns {string}
   */
  get companyId(): string {
    return this._json.company_id;
  }

  /**
   * Get the json representation of this class.
   * @returns {DisasterRecoveryRunbookJson}
   */
  get json(): DisasterRecoveryRunbookJson {
    return Object.assign({}, this._json);
  }

  /**
   * Get the string representation of this class.
   * @returns {string}
   */
  toString(): string {
    return JSON.stringify(this._json, undefined, 2);
  }

  /**
   * Refreshes the DisasterRecoveryRunbook data by retrieving it from the API again.
   * @returns {Promise<DisasterRecoveryRunbook>} promise that resolves with this object
   */
  async refresh(): Promise<DisasterRecoveryRunbook> {
    return Iland.getHttp().get(`/disaster-recovery-runbooks/${this.uuid}`).then((response) => {
      this._json = response.data as DisasterRecoveryRunbookJson;
      return this;
    });
  }

  /**
   * Deletes a DisasterRecoveryRunbook.
   * @returns {Promise<any>} a promise that resolves when the operation completes
   */
  async delete(): Promise<any> {
    return Iland.getHttp().delete(`/disaster-recovery-runbooks/${this.uuid}`);
  }

  /**
   * Updates a disaster recovery runbook.
   * @param {DisasterRecoveryRunbookUpdateRequest} request the update request
   * @returns {Promise<DisasterRecoveryRunbook>} a promise that resolves with the updated runbook.
   */
  async update(request: DisasterRecoveryRunbookUpdateRequest): Promise<DisasterRecoveryRunbook> {
    return Iland.getHttp().put(`/disaster-recovery-runbooks/${this.uuid}`, request.json).then((response) => {
      const json = response.data as DisasterRecoveryRunbookJson;
      return new DisasterRecoveryRunbook(json);
    });
  }

  /**
   * Abort a disaster recovery runbook.
   * @param {DisasterRecoveryRunbookAbortRequest} abortRequest
   * @returns {Promise<Task>}
   */
  async abort(abortRequest: DisasterRecoveryRunbookAbortRequest): Promise<Task> {
    return Iland.getHttp().post(`/disaster-recovery-runbooks/${this.uuid}/actions/abort`, abortRequest.json)
      .then((response) => {
        const json = response.data as TaskJson;
        return new Task(json);
      });
  }

  /**
   * Execute a runbook.
   * @param {DisasterRecoveryRunbookExecuteRequest} executeRequest
   * @returns {Promise<any>}
   */
  async execute(executeRequest: DisasterRecoveryRunbookExecuteRequest): Promise<Task> {
    return Iland.getHttp().post(`/disaster-recovery-runbooks/${this.uuid}/actions/execute`, executeRequest.json)
      .then((response) => {
        const json = response.data as TaskJson;
        return new Task(json);
      });
  }

  /**
   * Finalize runbook execution.
   * @param {DisasterRecoveryRunbookFinalizeExecutionRequest} finalizeExecutionRequest
   * @returns {Promise<Task>}
   */
  async finalizeExecution(finalizeExecutionRequest: DisasterRecoveryRunbookFinalizeExecutionRequest): Promise<Task> {
    return Iland.getHttp()
      .post(`/disaster-recovery-runbooks/${this.uuid}/actions/finalize`, finalizeExecutionRequest.json)
      .then((response) => {
        const json = response.data as TaskJson;
        return new Task(json);
      });
  }

  /**
   * Run a runbook test.
   * @returns {Promise<Task>}
   */
  async test(): Promise<Task> {
    return Iland.getHttp().post(`/disaster-recovery-runbooks/${this.uuid}/actions/test`, {})
      .then((response) => {
        const json = response.data as TaskJson;
        return new Task(json);
      });
  }

  /**
   * Get report href.
   * @param {string} reportUuid
   * @param {string} filename
   * @returns {Observable<string>}
   */
  getReportHref(reportUuid: string, filename?: string): Observable<string> {
    let href = `${Iland.baseUrl}/disaster-recovery-runbooks/${this.uuid}/reports/${reportUuid}/export?accept=` +
      encodeURIComponent(Http.versionMime('application/octet-stream'));
    if (filename) {
      href = href + '&filename=' + encodeURIComponent(filename);
    }
    const observable: Observable<string> = Iland.getAuthProvider().getTokenObservable();
    return observable.map(token => `${href}&oauth_token=${token}`);
  }

  /**
   * Get runbook task details
   * @param {string} taskUuid
   * @returns {Promise<DisasterRecoveryRunbookReportDetails>}
   */
  async getRunbookTaskDetails(taskUuid: string): Promise<DisasterRecoveryRunbookReportDetails> {
    return Iland.getHttp().get(`/disaster-recovery-runbooks/${this.uuid}/runbook-task-details/${taskUuid}`)
      .then((response) => {
        const json = response.data as DisasterRecoveryRunbookReportDetailsJson;
        return new DisasterRecoveryRunbookReportDetails(json);
      });
  }
}
