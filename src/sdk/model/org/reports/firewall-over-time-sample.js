"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* istanbul ignore next: autogenerated */
var FirewallOverTimeSample = (function () {
    function FirewallOverTimeSample(_json) {
        this._json = _json;
    }
    Object.defineProperty(FirewallOverTimeSample.prototype, "time", {
        /**
         * Get time.
         * @returns {number}
         */
        get: function () {
            return this._json.time;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirewallOverTimeSample.prototype, "totalDrops", {
        /**
         * Get total drops.
         * @returns {number}
         */
        get: function () {
            return this._json.total_drops;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirewallOverTimeSample.prototype, "totalAllows", {
        /**
         * Get total allows.
         * @returns {number}
         */
        get: function () {
            return this._json.total_allows;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirewallOverTimeSample.prototype, "totalLogOnly", {
        /**
         * Get total log only.
         * @returns {number}
         */
        get: function () {
            return this._json.total_log_only;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirewallOverTimeSample.prototype, "json", {
        /**
         * Get the json representation of this class.
         * @returns {FirewallOverTimeSampleJson}
         */
        get: function () {
            return Object.assign({}, this._json);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get the string representation of this class.
     * @returns {string}
     */
    FirewallOverTimeSample.prototype.toString = function () {
        return JSON.stringify(this._json, undefined, 2);
    };
    return FirewallOverTimeSample;
}());
exports.FirewallOverTimeSample = FirewallOverTimeSample;
