import { Entity } from '../common/entity';
import { Iland } from '../../iland';
import { VCCFailoverPlanJson, VccFailoverPlanStatus } from './__json__/failover-plan-json';
import { EntityType } from '../common/__json__/entity-type';
import { VCCFailoverPlanVm } from './failover-plan-vm';
import { Task } from '../task/task';
import { TaskJson } from '../task/__json__/task-json';

/**
 * VCC Failover Plan.
 */
/* istanbul ignore next: autogenerated */
export class VCCFailoverPlan extends Entity {

  constructor(private _json: VCCFailoverPlanJson) {
    super(_json);
  }

  /**
   * Gets a VCC Failover Plan by UUID.
   * @param {string} uuid
   * @returns {Promise<VCCFailoverPlan>} promise that resolves with the VCC Failover Plan
   */
  static async getFailoverPlan(uuid: string): Promise<VCCFailoverPlan> {
    return Iland.getHttp().get(`/vcc-failover-plans/${uuid}`).then((response) => {
      const json = response.data as VCCFailoverPlanJson;
      return new VCCFailoverPlan(json);
    });
  }

  get entityType(): EntityType {
    return 'IAAS_VCC_FAILOVER_PLAN';
  }

  /**
   * Get org uuid.
   * @returns {string}
   */
  get orgUuid(): string {
    return this._json.org_uuid;
  }

  /**
   * Get uid.
   * @returns {string}
   */
  get uid(): string {
    return this._json.uid;
  }

  /**
   * Get description.
   * @returns {string}
   */
  get description(): string {
    return this._json.description;
  }

  /**
   * Get last test.
   * @returns {number}
   */
  get lastTest(): number {
    return this._json.last_test;
  }

  /**
   * Get vcc tenant uid.
   * @returns {string}
   */
  get vccTenantUid(): string {
    return this._json.vcc_tenant_uid;
  }

  /**
   * Get vcc tenant name.
   * @returns {string}
   */
  get vccTenantName(): string {
    return this._json.vcc_tenant_name;
  }

  /**
   * Get vms.
   * @returns {Array<VCCFailoverPlanVm>}
   */
  get vms(): Array<VCCFailoverPlanVm> {
    return this._json.vms.map(it => new VCCFailoverPlanVm(it));
  }

  /**
   * Get status.
   * @returns {VccFailoverPlanStatus}
   */
  get status(): VccFailoverPlanStatus {
    return this._json.status;
  }

  /**
   * Get the json representation of this class.
   * @returns {VCCFailoverPlanJson}
   */
  get json(): VCCFailoverPlanJson {
    return Object.assign({}, this._json);
  }

  /**
   * Get the string representation of this class.
   * @returns {string}
   */
  toString(): string {
    return JSON.stringify(this._json, undefined, 2);
  }

  /**
   * Refreshes the VCC Failover Plan data by retrieving it from the API again.
   * @returns {Promise<VCCFailoverPlan>} promise that resolves with this object
   */
  async refresh(): Promise<VCCFailoverPlan> {
    return Iland.getHttp().get(`/vcc-failover-plans/${this.uuid}`).then((response) => {
      this._json = response.data as VCCFailoverPlanJson;
      return this;
    });
  }

  /**
   * Invokes a failover test for this failover plan.
   * @returns {Promise<Task>} async task details
   */
  /* istanbul ignore next: autogenerated */
  async failoverTest(): Promise<Task> {
    return Iland.getHttp().post(`/vcc-failover-plans/${this.uuid}/actions/failover-test`, {}).then((response) => {
      const json = response.data as TaskJson;
      return new Task(json);
    });
  }

  /**
   * Invokes a live failover operation for this failover plan.
   * @returns {Promise<Task>} async task details
   */
  /* istanbul ignore next: autogenerated */
  async failoverStart(): Promise<Task> {
    return Iland.getHttp().post(`/vcc-failover-plans/${this.uuid}/actions/failover-start`, {}).then((response) => {
      const json = response.data as TaskJson;
      return new Task(json);
    });
  }

  /**
   * Executes the undo action for a previous failover operation on this failover plan.
   * @returns {Promise<Task>} async task details
   */
  /* istanbul ignore next: autogenerated */
  async failoverUndo(): Promise<Task> {
    return Iland.getHttp().post(`/vcc-failover-plans/${this.uuid}/actions/failover-undo`, {}).then((response) => {
      const json = response.data as TaskJson;
      return new Task(json);
    });
  }

}
