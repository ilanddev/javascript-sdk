import { BackupSourceStatsJson } from './__json__/backup-source-stats-json';

/**
 * Backup Source Stats.
 */
/* istanbul ignore next: autogenerated */
export class BackupSourceStats {

  constructor(private _json: BackupSourceStatsJson) {
  }

  /**
   * Get admitted time.
   * @returns {number | null}
   */
  get admittedTime(): number | null {
    return this._json.admitted_time ?? null;
  }

  /**
   * Get end time.
   * @returns {number | null}
   */
  get endTime(): number | null {
    return this._json.end_time ?? null;
  }

  /**
   * Get start time.
   * @returns {number}
   */
  get startTime(): number {
    return this._json.start_time;
  }

  /**
   * Get time taken millis.
   * @returns {number | null}
   */
  get timeTakenMillis(): number | null {
    return this._json.time_taken_millis ?? null;
  }

  /**
   * Get total bytes read from source.
   * @returns {number}
   */
  get totalBytesReadFromSource(): number {
    return this._json.total_bytes_read_from_source;
  }

  /**
   * Get total bytes to read from source.
   * @returns {number}
   */
  get totalBytesToReadFromSource(): number {
    return this._json.total_bytes_to_read_from_source;
  }

  /**
   * Get total logical backup size bytes.
   * @returns {number}
   */
  get totalLogicalBackupSizeBytes(): number {
    return this._json.total_logical_backup_size_bytes;
  }

  /**
   * Get total physical backup size bytes.
   * @returns {number}
   */
  get totalPhysicalBackupSizeBytes(): number {
    return this._json.total_physical_backup_size_bytes;
  }

  /**
   * Get total source size bytes.
   * @returns {number}
   */
  get totalSourceSizeBytes(): number {
    return this._json.total_source_size_bytes;
  }

  /**
   * Get the json representation of this class.
   * @returns {BackupSourceStatsJson}
   */
  get json(): BackupSourceStatsJson {
    return Object.assign({}, this._json);
  }

  /**
   * Get the string representation of this class.
   * @returns {string}
   */
  toString(): string {
    return JSON.stringify(this._json, undefined, 2);
  }
}
