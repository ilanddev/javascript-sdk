import { BackupGroupJson } from './__json__/backup-group-json';
import { Iland } from '../../../iland';
import { BackupGroupUpdateRequest } from './backup-group-update-request';
import { BackupGroupDiskUnit } from './backup-group-disk-unit';
import { BackupGroupIndexingPolicy } from './backup-group-indexing-policy';
import { BackupGroupPriority } from './__json__/backup-group-priority';
import { BackupGroupQosType } from './__json__/backup-group-qos-type';
import { ProtectionSource } from './protection-source';
import { TimeOfDay } from './time-of-day';
import { EntityType } from '../../common/__json__/entity-type';
import { BackupGroupDeleteRequest } from './backup-group-delete-request';
import { BackupGroupSummaryStats } from '../backup-run/backup-group-summary-stats';
import { BackupGroupSummaryStatsJson } from '../backup-run/__json__/backup-group-summary-stats-json';
import { BackupSummaryStats } from '../backup-run/backup-summary-stats';
import { BackupGroupRun } from '../backup-run/backup-group-run';
import { BackupPolicy } from '../backup-policy/backup-policy';
import { BackupPolicyJson } from '../backup-policy/__json__/backup-policy-json';
import { BackupGroupRunJson } from '../backup-run/__json__/backup-group-run-json';
import { BackupGroupStorageMetric } from './__json__/backup-group-storage-metric';
import {
  BackupGroupStorageSampleSeries
} from './backup-group-storage-sample-series';
import { BackupGroupStorageSampleSeriesJson } from './__json__/backup-group-storage-sample-series-json';

/**
 * Backup Group.
 */
/* istanbul ignore next: autogenerated */
export class BackupGroup {

  constructor(private _json: BackupGroupJson) {
  }

  /**
   * Gets the entity type.
   * @returns {EntityType}
   */
  get entityType(): EntityType {
    return 'IAAS_BACKUP_GROUP';
  }

  /**
   * Get company id.
   * @returns {string}
   */
  get companyId(): string {
    return this._json.company_id;
  }

  /**
   * Get uid.
   * @returns {string}
   */
  get uid(): string {
    return this._json.uid;
  }

  /**
   * Get location id.
   * @returns {string}
   */
  get locationId(): string {
    return this._json.location_id;
  }

  /**
   * Get name.
   * @returns {string}
   */
  get name(): string {
    return this._json.name;
  }

  /**
   * Get creation time.
   * @returns {number}
   */
  get creationTime(): number {
    return this._json.creation_time;
  }

  /**
   * Get modified time.
   * @returns {number}
   */
  get modifiedTime(): number {
    return this._json.modified_time;
  }

  /**
   * Get description.
   * @returns {string | null}
   */
  get description(): string | null {
    return this._json.description || null;
  }

  /**
   * Get end time.
   * @returns {number | null}
   */
  get endTime(): number | null {
    return this._json.end_time ?? null;
  }

  /**
   * Get active.
   * @returns {boolean}
   */
  get active(): boolean {
    return this._json.active;
  }

  /**
   * Get deleted.
   * @returns {boolean}
   */
  get deleted(): boolean {
    return this._json.deleted;
  }

  /**
   * Get paused.
   * @returns {boolean}
   */
  get paused(): boolean {
    return this._json.paused;
  }

  /**
   * Get excluded disks.
   * @returns {Array<BackupGroupDiskUnit>}
   */
  get excludedDisks(): Array<BackupGroupDiskUnit> {
    return this._json.excluded_disks?.map(it => new BackupGroupDiskUnit(it));
  }

  /**
   * Get fallback to crash consistent.
   * @returns {boolean}
   */
  get fallbackToCrashConsistent(): boolean {
    return this._json.fallback_to_crash_consistent;
  }

  /**
   * Get skip physical rdm disks.
   * @returns {boolean}
   */
  get skipPhysicalRdmDisks(): boolean {
    return this._json.skip_physical_rdm_disks;
  }

  /**
   * Get full protection sla time mins.
   * @returns {number}
   */
  get fullProtectionSlaTimeMins(): number {
    return this._json.full_protection_sla_time_mins;
  }

  /**
   * Get incremental protection sla time mins.
   * @returns {number}
   */
  get incrementalProtectionSlaTimeMins(): number {
    return this._json.incremental_protection_sla_time_mins;
  }

  /**
   * Get indexing policy.
   * @returns {BackupGroupIndexingPolicy}
   */
  get indexingPolicy(): BackupGroupIndexingPolicy {
    return new BackupGroupIndexingPolicy(this._json.indexing_policy);
  }

  /**
   * Get policy id.
   * @returns {string}
   */
  get policyId(): string {
    return this._json.policy_id;
  }

  /**
   * Get policy applied time.
   * @returns {number}
   */
  get policyAppliedTime(): number {
    return this._json.policy_applied_time;
  }

  /**
   * Get priority.
   * @returns {BackupGroupPriority}
   */
  get priority(): BackupGroupPriority {
    return this._json.priority;
  }

  /**
   * Get qos type.
   * @returns {BackupGroupQosType}
   */
  get qosType(): BackupGroupQosType {
    return this._json.qos_type;
  }

  /**
   * Get excluded sources.
   * @returns {Array<ProtectionSource>}
   */
  get excludedSources(): Array<ProtectionSource> {
    return this._json.excluded_sources?.map(it => new ProtectionSource(it));
  }

  /**
   * Get protected sources.
   * @returns {Array<ProtectionSource>}
   */
  get protectedSources(): Array<ProtectionSource> {
    return this._json.protected_sources?.map(it => new ProtectionSource(it));
  }

  /**
   * Get start time.
   * @returns {TimeOfDay}
   */
  get startTime(): TimeOfDay {
    return new TimeOfDay(this._json.start_time);
  }

  /**
   * Get timezone.
   * @returns {string}
   */
  get timezone(): string {
    return this._json.timezone;
  }

  /**
   * Get org uuid.
   * @returns {string}
   */
  get orgUuid(): string {
    return this._json.org_uuid;
  }

  /**
   * Get vdc uuid.
   * @returns {string}
   */
  get vdcUuid(): string {
    return this._json.vdc_uuid;
  }

  /**
   * Get abort in blackout period.
   * @returns {boolean}
   */
  get abortInBlackoutPeriod(): boolean {
    return this._json.abort_in_blackout_period;
  }

  /**
   * Get continue on quiesce failure.
   * @returns {boolean}
   */
  get continueOnQuiesceFailure(): boolean {
    return this._json.continue_on_quiesce_failure;
  }

  /**
   * Get quiesce.
   * @returns {boolean}
   */
  get quiesce(): boolean {
    return this._json.quiesce;
  }

  /**
   * Get summary stats.
   * @returns {BackupSummaryStats | null}
   */
  get summaryStats(): BackupSummaryStats | null {
    return this._json.summary_stats ? new BackupSummaryStats(this._json.summary_stats) : null;
  }

  /**
   * Get last run.
   * @returns {BackupGroupRun | null}
   */
  get lastRun(): BackupGroupRun | null {
    return this._json.last_run ? new BackupGroupRun(this._json.last_run) : null;
  }

  /**
   * Get backup policy.
   * @returns {BackupPolicy | null}
   */
  get backupPolicy(): BackupPolicy | null {
    return this._json.backup_policy ? new BackupPolicy(this._json.backup_policy) : null;
  }

  /**
   * Get the json representation of this class.
   * @returns {BackupGroupJson}
   */
  get json(): BackupGroupJson {
    return Object.assign({}, this._json);
  }

  /**
   * Get the string representation of this class.
   * @returns {string}
   */
  toString(): string {
    return JSON.stringify(this._json, undefined, 2);
  }

  /**
   * Get details of an individual backup protection group.
   *
   * @param {string} uid
   * @param {boolean} includeSummaryStats Default is false. (Optional)
   * @param {boolean} includeLastRun Default is false. (Optional)
   * @param {boolean} includeBackupPolicy Default is false. (Optional)
   * @return {Promise<BackupGroup>}
   */
   /* istanbul ignore next: autogenerated */
  static async getBackupGroup(uid: string,
                              includeSummaryStats?: boolean,
                              includeLastRun?: boolean,
                              includeBackupPolicy?: boolean): Promise<BackupGroup> {
    return Iland.getHttp().get(`/backup-groups/${uid}`, {
      params: {
        includeSummaryStats: includeSummaryStats ?? false,
        includeLastRun: includeLastRun ?? false,
        includeBackupPolicy: includeBackupPolicy ?? false
      }
    }).then((response) => {
      const json = response.data as BackupGroupJson;
      return new BackupGroup(json);
    });
  }

  /**
   * Get details for the policy associated with a specified backup group.
   *
   * @return {Promise<BackupPolicy>}
   */
  /* istanbul ignore next: autogenerated */
  async getBackupGroupPolicy(): Promise<BackupPolicy> {
    return Iland.getHttp().get(`/backup-groups/${this.uid}/policy`).then((response) => {
      const json = response.data as BackupPolicyJson;
      return new BackupPolicy(json);
    });
  }

  /**
   * Get a specific backup group run.
   *
   * @param {string} backupRunUid
   * @return {Promise<BackupGroupRun>}
   */
  /* istanbul ignore next: autogenerated */
  async getBackupGroupRun(backupRunUid: string): Promise<BackupGroupRun> {
    return Iland.getHttp().get(`/backup-groups/${this.uid}/runs/${backupRunUid}`).then((response) => {
      const json = response.data as BackupGroupRunJson;
      return new BackupGroupRun(json);
    });
  }

  /**
   * List runs for the specified backup group.
   * Limit defaults to 10 and query time range defaults to last 24 hours.
   *
   * @param {number} startTimeMillis Default is 24 hours ago. (Optional)
   * @param {number} endTimeMillis Default is now. (Optional)
   * @param {number} limit Default is 10. (Optional)
   * @returns {Promise<Array<BackupGroupRun>>}
   */
  /* istanbul ignore next: autogenerated */
  async listBackupGroupRuns(startTimeMillis?: number,
                            endTimeMillis?: number,
                            limit?: number): Promise<Array<BackupGroupRun>> {
    return Iland.getHttp().get(`/backup-groups/${this.uid}/backup-runs`, {
      params: {
        startTimeMillis: startTimeMillis ?? null,
        endTimeMillis: endTimeMillis ?? null,
        limit: limit ?? null
      }
    }).then((response) => {
      const json = response.data.data as Array<BackupGroupRunJson>;
      return json.map((it) => new BackupGroupRun(it));
    });
  }

  /**
   * Get summary stats for an individual backup protection group.
   * Stat time-range defaults to the past 24 hours.
   * Both startTimeMillis and endTimeMillis params are required if one is used.
   *
   * @param {number} startTimeMillis Default is 24 hours ago. (Optional)
   * @param {number} endTimeMillis Default is now. (Optional)
   * @return {Promise<BackupGroupSummaryStats>}
   */
   /* istanbul ignore next: autogenerated */
  async getBackupGroupSummaryStats(startTimeMillis?: number,
                                   endTimeMillis?: number): Promise<BackupGroupSummaryStats> {
    return Iland.getHttp().get(`/backup-groups/${this.uid}/summary-stats`, {
      params: {
        startTimeMillis: startTimeMillis ?? null,
        endTimeMillis: endTimeMillis ?? null
      }
    }).then((response) => {
      const json = response.data as BackupGroupSummaryStatsJson;
      return new BackupGroupSummaryStats(json);
    });
  }

  /**
   * Update a backup group.
   *
   * @param {BackupGroupUpdateRequest} updateRequest
   * @returns {Promise<BackupGroup>}
   */
  /* istanbul ignore next: autogenerated */
  async updateBackupGroup(updateRequest: BackupGroupUpdateRequest): Promise<BackupGroup> {
    return Iland.getHttp().put(`/backup-groups/${this.uid}`, updateRequest.json).then((response) => {
      const json = response.data as BackupGroupJson;
      return new BackupGroup(json);
    });
  }

  /**
   * Delete a backup group.
   *
   * @param {BackupGroupDeleteRequest} deleteRequest the deletion request
   * @returns {Promise<unknown>}
   */
  /* istanbul ignore next: autogenerated */
  async deleteBackupGroup(deleteRequest: BackupGroupDeleteRequest): Promise<unknown> {
    return Iland.getHttp().delete(`/backup-groups/${this.uid}`, {
      headers: {
        'Content-Type': 'application/json'
      },
      data: {
        delete_snapshots: deleteRequest.deleteSnapshots
      }
    });
  }

  /**
   * Gets the list of storage metrics that are available for the backup group.
   *
   * @return {Promise<Array<BackupGroupStorageMetric>>} the list of storage metrics names
   */
  /* istanbul ignore next: autogenerated */
  async getBackupStorageMetrics(): Promise<Array<BackupGroupStorageMetric>> {
    return Iland.getHttp().get(`/backup-groups/${this.uid}/backup-storage-metrics`).then((response) => {
      return response.data.data as Array<BackupGroupStorageMetric>;
    });
  }

  /**
   * Gets a series of backup group storage samples for a specified storage
   * metric.
   *
   * @param {BackupGroupStorageMetric} metric the storage metric name
   * @param {number} startTimeMillis start of the series (Optional)
   * @param {number} endTimeMillis end of the series (Optional)
   * @return {Promise<BackupGroupStorageSampleSeries>} the sample series
   */
  /* istanbul ignore next: autogenerated */
  async getBackupStorageSamples(metric: BackupGroupStorageMetric,
                                startTimeMillis?: number,
                                endTimeMillis?: number): Promise<BackupGroupStorageSampleSeries> {
    return Iland.getHttp().get(`/backup-groups/${this.uid}/backup-storage-metrics/${metric}/samples`, {
      params: {
        startTimeMillis: startTimeMillis ?? null,
        endTimeMillis: endTimeMillis ?? null
      }
    }).then((response) => {
      const json = response.data as BackupGroupStorageSampleSeriesJson;
      return new BackupGroupStorageSampleSeries(json);
    });
  }
}
