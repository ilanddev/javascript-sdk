import { BackupGroupUpdateRequestJson } from './__json__/backup-group-update-request-json';
import { BackupGroupDiskUnit } from './backup-group-disk-unit';
import { BackupGroupIndexingPolicy } from './backup-group-indexing-policy';
import { BackupGroupPriority } from './__json__/backup-group-priority';
import { BackupGroupQosType } from './__json__/backup-group-qos-type';
import { BackupGroupSourceRef } from './backup-group-source-ref';
import { TimeOfDay } from './time-of-day';
import { BackupGroupDiskUnitJson } from './__json__/backup-group-disk-unit-json';
import { BackupGroupIndexingPolicyJson } from './__json__/backup-group-indexing-policy-json';
import { BackupGroupSourceRefJson } from './__json__/backup-group-source-ref-json';
import { TimeOfDayJson } from './__json__/time-of-day-json';

/**
 * Backup Group Update Request.
 */
/* istanbul ignore next: autogenerated */
export class BackupGroupUpdateRequest {

  private readonly _json: BackupGroupUpdateRequestJson;

  constructor(backupGroupUpdateRequest: BackupGroupUpdateRequest);
  constructor(backupGroupUpdateRequestJson: BackupGroupUpdateRequestJson);
  constructor(name: string, description: string, endTime: number, excludedDisks: Array<BackupGroupDiskUnitJson>,
              fallbackToCrashConsistent: boolean, skipPhysicalRdmDisks: boolean, fullProtectionSlaTimeMins: number,
              incrementalProtectionSlaTimeMins: number, indexingPolicy: BackupGroupIndexingPolicyJson, policyId: string,
              priority: BackupGroupPriority, qosType: BackupGroupQosType,
              excludedSources: Array<BackupGroupSourceRefJson>, protectedSources: Array<BackupGroupSourceRefJson>,
              startTime: TimeOfDayJson, timezone: string, abortInBlackoutPeriod: boolean,
              continueOnQuiesceFailure: boolean, quiesce: boolean);
  constructor(firstParam: string | BackupGroupUpdateRequest | BackupGroupUpdateRequestJson, description?: string,
              endTime?: number, excludedDisks?: Array<BackupGroupDiskUnitJson>, fallbackToCrashConsistent?: boolean,
              skipPhysicalRdmDisks?: boolean, fullProtectionSlaTimeMins?: number,
              incrementalProtectionSlaTimeMins?: number, indexingPolicy?: BackupGroupIndexingPolicyJson,
              policyId?: string, priority?: BackupGroupPriority, qosType?: BackupGroupQosType,
              excludedSources?: Array<BackupGroupSourceRefJson>, protectedSources?: Array<BackupGroupSourceRefJson>,
              startTime?: TimeOfDayJson, timezone?: string, abortInBlackoutPeriod?: boolean,
              continueOnQuiesceFailure?: boolean, quiesce?: boolean) {
    if (typeof firstParam === 'string') {
      // Parameters constructor
      this._json = {
        name: firstParam,
        description: description,
        end_time: endTime,
        excluded_disks: excludedDisks,
        fallback_to_crash_consistent: fallbackToCrashConsistent,
        skip_physical_rdm_disks: skipPhysicalRdmDisks,
        full_protection_sla_time_mins: fullProtectionSlaTimeMins,
        incremental_protection_sla_time_mins: incrementalProtectionSlaTimeMins,
        indexing_policy: indexingPolicy,
        policy_id: policyId,
        priority: priority,
        qos_type: qosType,
        excluded_sources: excludedSources,
        protected_sources: protectedSources,
        start_time: startTime,
        timezone: timezone,
        abort_in_blackout_period: abortInBlackoutPeriod,
        continue_on_quiesce_failure: continueOnQuiesceFailure,
        quiesce: quiesce
      } as BackupGroupUpdateRequestJson;
    } else if (firstParam instanceof BackupGroupUpdateRequest) {
      // Copy constructor
      this._json = (firstParam as BackupGroupUpdateRequest).json;
    } else {
      // Json or empty constructor
      this._json = (firstParam || {}) as BackupGroupUpdateRequestJson;
    }
  }

  /**
   * Get name.
   * @returns {string}
   */
  get name(): string {
    return this._json.name;
  }

  /**
   * Get description.
   * @returns {string | null}
   */
  get description(): string | null {
    return this._json.description || null;
  }

  /**
   * Get end time.
   * @returns {number | null}
   */
  get endTime(): number | null {
    return this._json.end_time ?? null;
  }

  /**
   * Get excluded disks.
   * @returns {Array<BackupGroupDiskUnit> | null}
   */
  get excludedDisks(): Array<BackupGroupDiskUnit> | null {
    return this._json.excluded_disks?.map(it => new BackupGroupDiskUnit(it)) || null;
  }

  /**
   * Get fallback to crash consistent.
   * @returns {boolean | null}
   */
  get fallbackToCrashConsistent(): boolean | null {
    return this._json.fallback_to_crash_consistent ?? null;
  }

  /**
   * Get skip physical rdm disks.
   * @returns {boolean | null}
   */
  get skipPhysicalRdmDisks(): boolean | null {
    return this._json.skip_physical_rdm_disks ?? null;
  }

  /**
   * Get full protection sla time mins.
   * @returns {number}
   */
  get fullProtectionSlaTimeMins(): number {
    return this._json.full_protection_sla_time_mins;
  }

  /**
   * Get incremental protection sla time mins.
   * @returns {number}
   */
  get incrementalProtectionSlaTimeMins(): number {
    return this._json.incremental_protection_sla_time_mins;
  }

  /**
   * Get indexing policy.
   * @returns {BackupGroupIndexingPolicy | null}
   */
  get indexingPolicy(): BackupGroupIndexingPolicy | null {
    return this._json.indexing_policy ? new BackupGroupIndexingPolicy(this._json.indexing_policy) : null;
  }

  /**
   * Get policy id.
   * @returns {string}
   */
  get policyId(): string {
    return this._json.policy_id;
  }

  /**
   * Get priority.
   * @returns {BackupGroupPriority}
   */
  get priority(): BackupGroupPriority {
    return this._json.priority;
  }

  /**
   * Get qos type.
   * @returns {BackupGroupQosType}
   */
  get qosType(): BackupGroupQosType {
    return this._json.qos_type;
  }

  /**
   * Get excluded sources.
   * @returns {Array<BackupGroupSourceRef>}
   */
  get excludedSources(): Array<BackupGroupSourceRef> {
    return this._json.excluded_sources?.map(it => new BackupGroupSourceRef(it));
  }

  /**
   * Get protected sources.
   * @returns {Array<BackupGroupSourceRef>}
   */
  get protectedSources(): Array<BackupGroupSourceRef> {
    return this._json.protected_sources?.map(it => new BackupGroupSourceRef(it));
  }

  /**
   * Specifies the time of day to start the Protection Schedule.
   * This is optional and only applicable if the Protection Policy defines
   * a monthly or a daily Protection Schedule.
   */
  /**
   * Get start time.
   * @returns {TimeOfDay}
   */
  get startTime(): TimeOfDay {
    return new TimeOfDay(this._json.start_time);
  }

  /**
   * Get timezone.
   * @returns {string}
   */
  get timezone(): string {
    return this._json.timezone;
  }

  /**
   * Get abort in blackout period.
   * @returns {boolean}
   */
  get abortInBlackoutPeriod(): boolean {
    return this._json.abort_in_blackout_period;
  }

  /**
   * Get continue on quiesce failure.
   * @returns {boolean}
   */
  get continueOnQuiesceFailure(): boolean {
    return this._json.continue_on_quiesce_failure;
  }

  /**
   * Get quiesce.
   * @returns {boolean}
   */
  get quiesce(): boolean {
    return this._json.quiesce;
  }

  /**
   * Get the json representation of this class.
   * @returns {BackupGroupUpdateRequestJson}
   */
  get json(): BackupGroupUpdateRequestJson {
    return Object.assign({}, this._json);
  }

  /**
   * Get the string representation of this class.
   * @returns {string}
   */
  toString(): string {
    return JSON.stringify(this._json, undefined, 2);
  }
}
