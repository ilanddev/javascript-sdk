"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var network_sub_allocation_1 = require("./network-sub-allocation");
var ip_range_1 = require("./ip-range/ip-range");
/* istanbul ignore next: autogenerated */
var NetworkIpScope = (function () {
    function NetworkIpScope(_json) {
        this._json = _json;
    }
    Object.defineProperty(NetworkIpScope.prototype, "inherited", {
        /**
         * Get inherited.
         * @returns {boolean}
         */
        get: function () {
            return this._json.inherited;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NetworkIpScope.prototype, "gateway", {
        /**
         * Get gateway.
         * @returns {string}
         */
        get: function () {
            return this._json.gateway;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NetworkIpScope.prototype, "netmask", {
        /**
         * Get netmask.
         * @returns {string}
         */
        get: function () {
            return this._json.netmask;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NetworkIpScope.prototype, "primaryDns", {
        /**
         * Get primary dns.
         * @returns {string}
         */
        get: function () {
            return this._json.primary_dns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NetworkIpScope.prototype, "secondaryDns", {
        /**
         * Get secondary dns.
         * @returns {string}
         */
        get: function () {
            return this._json.secondary_dns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NetworkIpScope.prototype, "dnsSuffix", {
        /**
         * Get dns suffix.
         * @returns {string}
         */
        get: function () {
            return this._json.dns_suffix;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NetworkIpScope.prototype, "ipRanges", {
        /**
         * Get ip ranges.
         * @returns {Array<IpRange>}
         */
        get: function () {
            return this._json.ip_ranges.map(function (ipRange) { return new ip_range_1.IpRange(ipRange); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NetworkIpScope.prototype, "enabled", {
        /**
         * Get enabled.
         * @returns {boolean | undefined}
         */
        get: function () {
            return this._json.enabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NetworkIpScope.prototype, "allocatedIpAddresses", {
        /**
         * Get allocated ip addresses.
         * @returns {Array<string> | undefined}
         */
        get: function () {
            return this._json.allocated_ip_addresses;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NetworkIpScope.prototype, "subAllocations", {
        /**
         * Get sub allocations.
         * @returns {Array<NetworkSubAllocation> | undefined}
         */
        get: function () {
            return this._json.sub_allocations ? this._json.sub_allocations.map(function (alloc) {
                return new network_sub_allocation_1.NetworkSubAllocation(alloc);
            }) : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NetworkIpScope.prototype, "json", {
        /**
         * Get the json representation of this class.
         * @returns {NetworkIpScopeJson}
         */
        get: function () {
            return Object.assign({}, this._json);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get the string representation of this class.
     * @returns {string}
     */
    NetworkIpScope.prototype.toString = function () {
        return JSON.stringify(this._json, undefined, 2);
    };
    return NetworkIpScope;
}());
exports.NetworkIpScope = NetworkIpScope;
